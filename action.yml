name: "docker-ros"
description: "docker-ros automatically builds development and deployment Docker images for your ROS-based repositories."
branding:
  color: blue
  icon: package

inputs:
  additional-debs-file:
    description: "Relative filepath to file containing additional apt deb packages to install"
    default: docker/additional-debs.txt
  additional-files-dir:
    description: "Relative path to directory containing additional files to copy into image"
    default: docker/additional-files
  additional-pip-file:
    description: "Relative filepath to file containing additional pip packages to install"
    default: docker/additional-pip-requirements.txt
  base-image:
    description: "Base image name:tag"
    required: true
  blacklisted-packages-file:
    description: "Relative filepath to file containing blacklisted packages to remove from workspace"
    default: docker/blacklisted-packages.txt
  build-context:
    description: "Build context of Docker build process"
    default: ${{ github.workspace }}
  command:
    description: "Launch command of run image (required if target=run)"
  custom-script-file:
    description: "Relative filepath to script containing custom installation commands"
    default: docker/custom.sh
  dev-image-name:
    description: "Image name of dev image"
    default: ghcr.io/${{ github.repository }}
  dev-image-tag:
    description: "Image tag of dev image"
  disable-ros-installation:
    description: "Disable automatic installation of `ros-$ROS_DISTRO-ros-core` package, e.g., if ROS is already installed in `base-image` and package is not available for the OS"
    default: false
  enable-checkout:
    description: "Enable checkout action to (re-)download your repository prior to running the pipeline"
    default: true
  enable-checkout-lfs:
    description: "Enable Git LFS support for the checkout action"
    default: true
  enable-checkout-submodules:
    description: "Enable submodules for the checkout action (false|true|recursive)"
    default: recursive
  enable-industrial-ci:
    description: "Enable industrial_ci"
    default: false
  enable-push-as-latest:
    description: "Push images with tag `latest`/`latest-dev` in addition to the configured image names"
    default: false
  enable-recursive-additional-debs:
    description: "Enable recursive discovery of files named `additional-debs-file`"
    default: false
  enable-recursive-additional-pip:
    description: "Enable recursive discovery of files named `additional-pip-file`"
    default: false
  enable-recursive-blacklisted-packages:
    description: "Enable recursive discovery of files named `blacklisted-packages-file`"
    default: false
  enable-recursive-custom-script:
    description: "Enable recursive discovery of files named `custom-script-file`"
    default: false
  enable-singlearch-push:
    description: "Enable push of single arch images with [-amd64|-arm64] postfix"
    default: false
  enable-slim:
    description: "Enable an extra slimmed run image via slim (only if run stage is targeted)"
    default: true
  git-https-password:
    description: "Password for cloning private Git repositories via HTTPS"
    default: ${{ github.token }}
  git-https-server:
    description: "Server URL (without protocol) for cloning private Git repositories via HTTPS"
    default: "github.com"
  git-https-user:
    description: "Username for cloning private Git repositories via HTTPS"
    default: ${{ github.actor }}
  git-ssh-known-host-keys:
    description: "Known SSH host keys for cloning private Git repositories via SSH (may be obtained using `ssh-keyscan`)"
  git-ssh-private-key:
    description: "SSH private key for cloning private Git repositories via SSH"
  image-name:
    description: "Image name of run image"
    default: ghcr.io/${{ github.repository }}
  image-tag:
    description: "Image tag of run image"
    default: latest
  platform:
    description: "Target platform architecture (comma-separated list) [amd64|arm64|...]"
  registry:
    description: "Docker registry to push images to"
    default: ghcr.io
  registry-password:
    description: "Docker registry password"
    default: ${{ github.token }}
  registry-user:
    description: "Docker registry username"
    default: ${{ github.actor }}
  ros-distro:
    description: "ROS Distro (required if ROS is not installed in `base-image`)"
  rmw-implementation:
    description: "RMW implementation to use (only for ROS 2)"
    default: rmw_cyclonedds_cpp
  rmw-zenoh-git-ref:
    description: "Git ref of rmw_zenoh repo to build if `RMW_IMPLEMENTATION=rmw_zenoh_cpp`"
    default: 28d917e0532fed6e9703f044662298f2b3553716
  slim-build-args:
    description: "Arguments to `slim build` (except for `--target` and `--tag`)"
    default: '--sensor-ipc-mode proxy --continue-after=10 --show-clogs --http-probe=false'
  slim-image-name:
    description: "Image name of slim run image"
    default: ghcr.io/${{ github.repository }}
  slim-image-tag:
    description: "Image tag of slim run image"
  target:
    description: "Target stage of Dockerfile (comma-separated list) [dev|run]"
    default: run


runs:
  using: "composite"
  steps:

    - name: Checkout repository
      uses: actions/checkout@v3
      if: ${{ inputs.enable-checkout == 'true' }}
      with:
        submodules: ${{ inputs.enable-checkout-submodules }}
        lfs: ${{ inputs.enable-checkout-lfs }}

    - name: Set up docker-ros
      shell: bash
      working-directory: ${{ inputs.build-context }}
      run: |
            if ! [[ -d "docker/docker-ros" ]]; then
              mkdir -p docker
              cp -r ${GITHUB_ACTION_PATH} docker/docker-ros
            fi

    - name: Prepare setup of QEMU
      id: prepare-setup-of-qemu
      shell: bash
      run: echo "RUNNER_ARCH=$(dpkg --print-architecture)" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      if: ${{ steps.prepare-setup-of-qemu.outputs.RUNNER_ARCH != inputs.platform }}
      uses: docker/setup-qemu-action@v2

    - name: Login to Docker registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-password }}

    - name: Set up Docker buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          image=public.ecr.aws/vend/moby/buildkit:buildx-stable-1

    - name: Enforce lower-case image name 
      id: image-name
      uses: ASzc/change-string-case-action@v6
      with:
        string: ${{ inputs.image-name }}

    - name: Enforce lower-case dev image name 
      id: dev-image-name
      uses: ASzc/change-string-case-action@v6
      with:
        string: ${{ inputs.dev-image-name }}

    - name: Enforce lower-case slim image name 
      id: slim-image-name
      uses: ASzc/change-string-case-action@v6
      with:
        string: ${{ inputs.slim-image-name }}

    - name: Build images
      id: build-images
      shell: bash
      working-directory: ${{ inputs.build-context }}
      run: docker/docker-ros/scripts/ci.sh
      env:
        ADDITIONAL_DEBS_FILE: ${{ inputs.additional-debs-file }}
        ADDITIONAL_FILES_DIR: ${{ inputs.additional-files-dir }}
        ADDITIONAL_PIP_FILE: ${{ inputs.additional-pip-file }}
        BASE_IMAGE: ${{ inputs.base-image }}
        BLACKLISTED_PACKAGES_FILE: ${{ inputs.blacklisted-packages-file }}
        COMMAND: ${{ inputs.command }}
        CUSTOM_SCRIPT_FILE: ${{ inputs.custom-script-file }}
        DEV_IMAGE_NAME: ${{ steps.dev-image-name.outputs.lowercase }}
        DEV_IMAGE_TAG: ${{ inputs.dev-image-tag }}
        DISABLE_ROS_INSTALLATION: ${{ inputs.disable-ros-installation }}
        ENABLE_RECURSIVE_ADDITIONAL_DEBS: ${{ inputs.enable-recursive-additional-debs }}
        ENABLE_RECURSIVE_ADDITIONAL_PIP: ${{ inputs.enable-recursive-additional-pip }}
        ENABLE_RECURSIVE_BLACKLISTED_PACKAGES: ${{ inputs.enable-recursive-blacklisted-packages }}
        ENABLE_RECURSIVE_CUSTOM_SCRIPT: ${{ inputs.enable-recursive-custom-script }}
        ENABLE_RECURSIVE_VCS_IMPORT: ${{ inputs.enable-recursive-vcs-import }}
        ENABLE_SLIM: ${{ inputs.enable-slim }}
        GIT_HTTPS_PASSWORD: ${{ inputs.git-https-password }}
        GIT_HTTPS_SERVER: ${{ inputs.git-https-server }}
        GIT_HTTPS_USER: ${{ inputs.git-https-user }}
        GIT_SSH_KNOWN_HOST_KEYS: ${{ inputs.git-ssh-known-host-keys }}
        GIT_SSH_PRIVATE_KEY: ${{ inputs.git-ssh-private-key }}
        IMAGE_NAME: ${{ steps.image-name.outputs.lowercase }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        PLATFORM: ${{ inputs.platform }}
        RMW_IMPLEMENTATION: ${{ inputs.rmw-implementation }}
        RMW_ZENOH_GIT_REF: ${{ inputs.rmw-zenoh-git-ref }}
        ROS_DISTRO: ${{ inputs.ros-distro }}
        SLIM_BUILD_ARGS: ${{ inputs.slim-build-args }}
        SLIM_IMAGE_NAME: ${{ steps.slim-image-name.outputs.lowercase }}
        SLIM_IMAGE_TAG: ${{ inputs.slim-image-tag }}
        TARGET: ${{ inputs.target }}
        VCS_IMPORT_FILE: ${{ inputs.vcs-import-file }}

    - name: Set up industrial_ci
      if: ${{ inputs.enable-industrial-ci == 'true' }}
      shell: bash
      run: test -f ${{ inputs.build-context }}/.repos || echo "repositories:" > ${{ inputs.build-context }}/.repos

    - name: Run industrial_ci
      if: ${{ inputs.enable-industrial-ci == 'true' }}
      uses: ros-industrial/industrial_ci@master
      env:
        ADDITIONAL_DEBS: git
        AFTER_INIT_EMBED: '[[ "$RMW_IMPLEMENTATION" == "rmw_zenoh_cpp" ]] && export UNDERLAY="/opt/ws_rmw_zenoh/install" ; [[ -n ${{ inputs.git-https-server }} ]] && git config --global url.https://${{ inputs.git-https-user }}:${{ inputs.git-https-password }}@${{ inputs.git-https-server }}.insteadOf https://${{ inputs.git-https-server }}'
        DOCKER_IMAGE: ${{ steps.build-images.outputs.INDUSTRIAL_CI_IMAGE }}
        DOCKER_PULL: false
        DOCKER_RUN_OPTS: -u root:root
        SSH_PRIVATE_KEY: ${{ inputs.git-ssh-private-key }}
        SSH_SERVER_HOSTKEYS: ${{ inputs.git-ssh-known-host-keys }}
        TARGET_WORKSPACE: ${{ inputs.build-context }}
        UPSTREAM_WORKSPACE: ${{ inputs.build-context }}/.repos

    - name: Slugify ref name
      id: slugify-ref-name
      uses: gacts/github-slug@v1
      with:
        to-slug: ${{ github.ref_name }}

    - name: Push images
      shell: bash
      working-directory: ${{ inputs.build-context }}
      run: docker/docker-ros/scripts/ci.sh
      env:
        ADDITIONAL_DEBS_FILE: ${{ inputs.additional-debs-file }}
        ADDITIONAL_FILES_DIR: ${{ inputs.additional-files-dir }}
        ADDITIONAL_PIP_FILE: ${{ inputs.additional-pip-file }}
        BASE_IMAGE: ${{ inputs.base-image }}
        BLACKLISTED_PACKAGES_FILE: ${{ inputs.blacklisted-packages-file }}
        COMMAND: ${{ inputs.command }}
        CUSTOM_SCRIPT_FILE: ${{ inputs.custom-script-file }}
        DEV_IMAGE_NAME: ${{ steps.dev-image-name.outputs.lowercase }}
        DEV_IMAGE_TAG: ${{ inputs.dev-image-tag }}
        DISABLE_ROS_INSTALLATION: ${{ inputs.disable-ros-installation }}
        ENABLE_RECURSIVE_ADDITIONAL_DEBS: ${{ inputs.enable-recursive-additional-debs }}
        ENABLE_RECURSIVE_ADDITIONAL_PIP: ${{ inputs.enable-recursive-additional-pip }}
        ENABLE_RECURSIVE_BLACKLISTED_PACKAGES: ${{ inputs.enable-recursive-blacklisted-packages }}
        ENABLE_RECURSIVE_CUSTOM_SCRIPT: ${{ inputs.enable-recursive-custom-script }}
        ENABLE_RECURSIVE_VCS_IMPORT: ${{ inputs.enable-recursive-vcs-import }}
        ENABLE_SINGLEARCH_PUSH: ${{ inputs.enable-singlearch-push }}
        ENABLE_SLIM: ${{ inputs.enable-slim }}
        GIT_HTTPS_PASSWORD: ${{ inputs.git-https-password }}
        GIT_HTTPS_SERVER: ${{ inputs.git-https-server }}
        GIT_HTTPS_USER: ${{ inputs.git-https-user }}
        GIT_SSH_KNOWN_HOST_KEYS: ${{ inputs.git-ssh-known-host-keys }}
        GIT_SSH_PRIVATE_KEY: ${{ inputs.git-ssh-private-key }}
        IMAGE_NAME: ${{ steps.image-name.outputs.lowercase }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        PLATFORM: ${{ inputs.platform }}
        RMW_IMPLEMENTATION: ${{ inputs.rmw-implementation }}
        RMW_ZENOH_GIT_REF: ${{ inputs.rmw-zenoh-git-ref }}
        ROS_DISTRO: ${{ inputs.ros-distro }}
        SLIM_BUILD_ARGS: ${{ inputs.slim-build-args }}
        SLIM_IMAGE_NAME: ${{ steps.slim-image-name.outputs.lowercase }}
        SLIM_IMAGE_TAG: ${{ inputs.slim-image-tag }}
        TARGET: ${{ inputs.target }}
        VCS_IMPORT_FILE: ${{ inputs.vcs-import-file }}
        _ENABLE_IMAGE_PUSH: true
        _IMAGE_POSTFIX: ${{ github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && format('_{0}_ci', steps.slugify-ref-name.outputs.slug) || '' }}

    - name: Push images (as latest)
      if: ${{ inputs.enable-push-as-latest == 'true' }}
      shell: bash
      working-directory: ${{ inputs.build-context }}
      run: docker/docker-ros/scripts/ci.sh
      env:
        ADDITIONAL_DEBS_FILE: ${{ inputs.additional-debs-file }}
        ADDITIONAL_FILES_DIR: ${{ inputs.additional-files-dir }}
        ADDITIONAL_PIP_FILE: ${{ inputs.additional-pip-file }}
        BASE_IMAGE: ${{ inputs.base-image }}
        BLACKLISTED_PACKAGES_FILE: ${{ inputs.blacklisted-packages-file }}
        COMMAND: ${{ inputs.command }}
        CUSTOM_SCRIPT_FILE: ${{ inputs.custom-script-file }}
        DEV_IMAGE_NAME: ${{ steps.dev-image-name.outputs.lowercase }}
        DEV_IMAGE_TAG: latest-dev
        DISABLE_ROS_INSTALLATION: ${{ inputs.disable-ros-installation }}
        ENABLE_RECURSIVE_ADDITIONAL_DEBS: ${{ inputs.enable-recursive-additional-debs }}
        ENABLE_RECURSIVE_ADDITIONAL_PIP: ${{ inputs.enable-recursive-additional-pip }}
        ENABLE_RECURSIVE_BLACKLISTED_PACKAGES: ${{ inputs.enable-recursive-blacklisted-packages }}
        ENABLE_RECURSIVE_CUSTOM_SCRIPT: ${{ inputs.enable-recursive-custom-script }}
        ENABLE_RECURSIVE_VCS_IMPORT: ${{ inputs.enable-recursive-vcs-import }}
        ENABLE_SINGLEARCH_PUSH: ${{ inputs.enable-singlearch-push }}
        ENABLE_SLIM: ${{ inputs.enable-slim }}
        GIT_HTTPS_PASSWORD: ${{ inputs.git-https-password }}
        GIT_HTTPS_SERVER: ${{ inputs.git-https-server }}
        GIT_HTTPS_USER: ${{ inputs.git-https-user }}
        GIT_SSH_KNOWN_HOST_KEYS: ${{ inputs.git-ssh-known-host-keys }}
        GIT_SSH_PRIVATE_KEY: ${{ inputs.git-ssh-private-key }}
        IMAGE_NAME: ${{ steps.image-name.outputs.lowercase }}
        IMAGE_TAG: latest
        PLATFORM: ${{ inputs.platform }}
        RMW_IMPLEMENTATION: ${{ inputs.rmw-implementation }}
        RMW_ZENOH_GIT_REF: ${{ inputs.rmw-zenoh-git-ref }}
        ROS_DISTRO: ${{ inputs.ros-distro }}
        SLIM_BUILD_ARGS: ${{ inputs.slim-build-args }}
        SLIM_IMAGE_NAME: ${{ steps.slim-image-name.outputs.lowercase }}
        SLIM_IMAGE_TAG: latest-slim
        TARGET: ${{ inputs.target }}
        VCS_IMPORT_FILE: ${{ inputs.vcs-import-file }}
        _ENABLE_IMAGE_PUSH: true
        _IMAGE_POSTFIX: ${{ github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && format('_{0}_ci', steps.slugify-ref-name.outputs.slug) || '' }}
